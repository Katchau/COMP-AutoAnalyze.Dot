/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. AutoAnalyserParser.jj */
/*@egen*/options {
               
                   
}


PARSER_BEGIN(AutoAnalyserParser)


public class AutoAnalyserParser/*@bgen(jjtree)*/implements AutoAnalyserParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTAutoAnalyserParserState jjtree = new JJTAutoAnalyserParserState();

/*@egen*/
}


PARSER_END(AutoAnalyserParser)



SKIP : {" " | "\r" | "\t" | "\n"}
TOKEN:
{
     <EQUAL : "=">
    |<VARIABLE: (["A"-"Z","a"-"z"] (["A" - "Z", "a"- "z","0"-"9"])*)>
    |<ENDLINE : ";">
    |<STRING: ("\""(~["\""])*"\"") >
    // OPERATION
    |<SUM : "+">
    |<COMPLEMENT: "!">
    |<CONCATENATION: ".">
    |<INTERSECTION: "/\\" >
    |<UNION: "|">
    |<DIFFERENCE:"-">
    |<ACCEPT: ".accept">
    //Load and save
    |<READ : ".read">
    |<WRITE :".write">
}

SimpleNode start() : {/*@bgen(jjtree) start */
  start jjtn000 = new start(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) start */
     try {
/*@egen*/
     (LOOKAHEAD(<VARIABLE> <READ>) read())+
     (LOOKAHEAD(2)operations())+
     (LOOKAHEAD(<VARIABLE> <WRITE>)saves())+
     <EOF>/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/
     {
        return jjtn000;
    }/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}


void read() : {/*@bgen(jjtree) read */
  read jjtn000 = new read(JJTREAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) read */
  try {
/*@egen*/
  identifier() loaddotty() <ENDLINE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void operations() : {/*@bgen(jjtree) operations */
  operations jjtn000 = new operations(JJTOPERATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  } {/*@bgen(jjtree) operations */
    try {
/*@egen*/
    identifier()
    (
        <EQUAL> expression()
      | <ACCEPT> "("/*@bgen(jjtree) input */
                     {
                       input jjtn001 = new input(JJTINPUT);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ input()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
                     }
/*@egen*/       /*@bgen(jjtree) accept */
                                    {
                                      accept jjtn002 = new accept(JJTACCEPT);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                    }
                                    try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002, true);
                                      }
                                    }
/*@egen*/        
    )
    <ENDLINE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expression():{/*@bgen(jjtree) expression */
  expression jjtn000 = new expression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) expression */
    try {
/*@egen*/
    expr1()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expr1():{/*@bgen(jjtree) expr1 */
  expr1 jjtn000 = new expr1(JJTEXPR1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) expr1 */
    try {
/*@egen*/

    expr2()[
        (
            <SUM>/*@bgen(jjtree) sum */
                  {
                    sum jjtn001 = new sum(JJTSUM);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ expr1()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/     
          | <CONCATENATION>/*@bgen(jjtree) concatenation */
                            {
                              concatenation jjtn002 = new concatenation(JJTCONCATENATION);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*/ expr1()/*@bgen(jjtree)*/
                            } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                throw (RuntimeException)jjte002;
                              }
                              if (jjte002 instanceof ParseException) {
                                throw (ParseException)jjte002;
                              }
                              throw (Error)jjte002;
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
                            }
/*@egen*/               
          | <INTERSECTION>/*@bgen(jjtree) intersection */
                           {
                             intersection jjtn003 = new intersection(JJTINTERSECTION);
                             boolean jjtc003 = true;
                             jjtree.openNodeScope(jjtn003);
                           }
                           try {
/*@egen*/ expr1()/*@bgen(jjtree)*/
                           } catch (Throwable jjte003) {
                             if (jjtc003) {
                               jjtree.clearNodeScope(jjtn003);
                               jjtc003 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte003 instanceof RuntimeException) {
                               throw (RuntimeException)jjte003;
                             }
                             if (jjte003 instanceof ParseException) {
                               throw (ParseException)jjte003;
                             }
                             throw (Error)jjte003;
                           } finally {
                             if (jjtc003) {
                               jjtree.closeNodeScope(jjtn003, true);
                             }
                           }
/*@egen*/              
          | <UNION>/*@bgen(jjtree) union */
                    {
                      union jjtn004 = new union(JJTUNION);
                      boolean jjtc004 = true;
                      jjtree.openNodeScope(jjtn004);
                    }
                    try {
/*@egen*/ expr1()/*@bgen(jjtree)*/
                    } catch (Throwable jjte004) {
                      if (jjtc004) {
                        jjtree.clearNodeScope(jjtn004);
                        jjtc004 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte004 instanceof RuntimeException) {
                        throw (RuntimeException)jjte004;
                      }
                      if (jjte004 instanceof ParseException) {
                        throw (ParseException)jjte004;
                      }
                      throw (Error)jjte004;
                    } finally {
                      if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, true);
                      }
                    }
/*@egen*/       
          | <DIFFERENCE>/*@bgen(jjtree) difference */
                         {
                           difference jjtn005 = new difference(JJTDIFFERENCE);
                           boolean jjtc005 = true;
                           jjtree.openNodeScope(jjtn005);
                         }
                         try {
/*@egen*/ expr1()/*@bgen(jjtree)*/
                         } catch (Throwable jjte005) {
                           if (jjtc005) {
                             jjtree.clearNodeScope(jjtn005);
                             jjtc005 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte005 instanceof RuntimeException) {
                             throw (RuntimeException)jjte005;
                           }
                           if (jjte005 instanceof ParseException) {
                             throw (ParseException)jjte005;
                           }
                           throw (Error)jjte005;
                         } finally {
                           if (jjtc005) {
                             jjtree.closeNodeScope(jjtn005, true);
                           }
                         }
/*@egen*/            
        )
    ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expr2():{/*@bgen(jjtree) expr2 */
  expr2 jjtn000 = new expr2(JJTEXPR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) expr2 */
  try {
/*@egen*/
  <COMPLEMENT>/*@bgen(jjtree) complement */
               {
                 complement jjtn001 = new complement(JJTCOMPLEMENT);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ expr3()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/            
  | expr3()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expr3():{/*@bgen(jjtree) expr3 */
  expr3 jjtn000 = new expr3(JJTEXPR3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) expr3 */
    try {
/*@egen*/
    "(" expr1() ")" | identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void saves() : {/*@bgen(jjtree) saves */
  saves jjtn000 = new saves(JJTSAVES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/   } {/*@bgen(jjtree) saves */
    try {
/*@egen*/
    identifier() <WRITE>"(" filename() ")" <ENDLINE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
    // o 1\u00ba arg teria
}

void identifier() : {/*@bgen(jjtree) identifier */
                      identifier jjtn000 = new identifier(JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token id;} {/*@bgen(jjtree) identifier */
        try {
/*@egen*/
        id = <VARIABLE>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
            jjtn000.name = id.image;
        }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void loaddotty() : {/*@bgen(jjtree) loaddotty */
  loaddotty jjtn000 = new loaddotty(JJTLOADDOTTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) loaddotty */
    try {
/*@egen*/
    <READ> "(" filename() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void filename() : {/*@bgen(jjtree) filename */
                   filename jjtn000 = new filename(JJTFILENAME);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token file;} {/*@bgen(jjtree) filename */
    try {
/*@egen*/
    file = <STRING>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{
        jjtn000.name = file.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void input() : {/*@bgen(jjtree) input */
                input jjtn000 = new input(JJTINPUT);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token in;}  {/*@bgen(jjtree) input */
    try {
/*@egen*/
    in = <STRING>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
      jjtn000.name = in.image;   }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
