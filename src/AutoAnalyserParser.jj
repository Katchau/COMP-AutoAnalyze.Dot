/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. AutoAnalyserParser.jj */
/*@egen*/options {
               
                   
}


PARSER_BEGIN(AutoAnalyserParser)


public class AutoAnalyserParser/*@bgen(jjtree)*/implements AutoAnalyserParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTAutoAnalyserParserState jjtree = new JJTAutoAnalyserParserState();

/*@egen*/
}


PARSER_END(AutoAnalyserParser)



SKIP : {" " | "\r" | "\t" | "\n"}
TOKEN:
{
     <EQUAL : "=">
    |<VARIABLE: (["A"-"Z","a"-"z"] (["A" - "Z", "a"- "z","0"-"9"])*)>
    |<ENDLINE : ";">
    |<STRING: ("\""(~["\""])*"\"") >
    // OPERATION
    |<COMPLEMENT: "!">
    |<REVERSE: "$">
    |<CONCATENATION: ".">
    |<INTERSECTION: "/\\" >
    |<UNION: "|">
    |<DIFFERENCE:"-">
    |<ACCEPT: ".accept">
    //Load and save
    |<READ : ".read">
    |<WRITE :".write">
}

SimpleNode Start() : {/*@bgen(jjtree) Start */
  Start jjtn000 = new Start(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Start */
     try {
/*@egen*/
     (LOOKAHEAD(<VARIABLE> <READ>) Read())+
     (LOOKAHEAD(2)Operations())+
     (LOOKAHEAD(<VARIABLE> <WRITE>)Saves())+
     <EOF>/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/
     {
        return jjtn000;
    }/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}


void Read() : {/*@bgen(jjtree) Read */
  Read jjtn000 = new Read(JJTREAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Read */
  try {
/*@egen*/
  Identifier() Loaddotty() <ENDLINE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Operations() : {/*@bgen(jjtree) Operations */
  Operations jjtn000 = new Operations(JJTOPERATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  } {/*@bgen(jjtree) Operations */
    try {
/*@egen*/
    Identifier()
    (
        <EQUAL> Expr1()
      | <ACCEPT> "(" Input()/*@bgen(jjtree) #Accept( 2) */
                             {
                               Accept jjtn001 = new Accept(JJTACCEPT);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
                             }
/*@egen*/           
    )
    <ENDLINE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr1():{/*@bgen(jjtree) Expr1 */
  Expr1 jjtn000 = new Expr1(JJTEXPR1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Expr1 */
    try {
/*@egen*/

    Expr2()[
        (
           <CONCATENATION>/*@bgen(jjtree) #Concatenation( 2) */
                           {
                             Concatenation jjtn001 = new Concatenation(JJTCONCATENATION);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ Expr1()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
                           }
/*@egen*/                  
          | <INTERSECTION>/*@bgen(jjtree) #Intersection( 2) */
                           {
                             Intersection jjtn002 = new Intersection(JJTINTERSECTION);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*/ Expr1()/*@bgen(jjtree)*/
                           } catch (Throwable jjte002) {
                             if (jjtc002) {
                               jjtree.clearNodeScope(jjtn002);
                               jjtc002 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte002 instanceof RuntimeException) {
                               throw (RuntimeException)jjte002;
                             }
                             if (jjte002 instanceof ParseException) {
                               throw (ParseException)jjte002;
                             }
                             throw (Error)jjte002;
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002,  2);
                             }
                           }
/*@egen*/                 
          | <UNION>/*@bgen(jjtree) #Union( 2) */
                    {
                      Union jjtn003 = new Union(JJTUNION);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
                    }
                    try {
/*@egen*/ Expr1()/*@bgen(jjtree)*/
                    } catch (Throwable jjte003) {
                      if (jjtc003) {
                        jjtree.clearNodeScope(jjtn003);
                        jjtc003 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte003 instanceof RuntimeException) {
                        throw (RuntimeException)jjte003;
                      }
                      if (jjte003 instanceof ParseException) {
                        throw (ParseException)jjte003;
                      }
                      throw (Error)jjte003;
                    } finally {
                      if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003,  2);
                      }
                    }
/*@egen*/          
          | <DIFFERENCE>/*@bgen(jjtree) #Difference( 2) */
                         {
                           Difference jjtn004 = new Difference(JJTDIFFERENCE);
                           boolean jjtc004 = true;
                           jjtree.openNodeScope(jjtn004);
                         }
                         try {
/*@egen*/ Expr1()/*@bgen(jjtree)*/
                         } catch (Throwable jjte004) {
                           if (jjtc004) {
                             jjtree.clearNodeScope(jjtn004);
                             jjtc004 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte004 instanceof RuntimeException) {
                             throw (RuntimeException)jjte004;
                           }
                           if (jjte004 instanceof ParseException) {
                             throw (ParseException)jjte004;
                           }
                           throw (Error)jjte004;
                         } finally {
                           if (jjtc004) {
                             jjtree.closeNodeScope(jjtn004,  2);
                           }
                         }
/*@egen*/               
        )
    ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr2():{/*@bgen(jjtree) Expr2 */
  Expr2 jjtn000 = new Expr2(JJTEXPR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expr2 */
  try {
/*@egen*/
  <COMPLEMENT>/*@bgen(jjtree) Complement */
               {
                 Complement jjtn001 = new Complement(JJTCOMPLEMENT);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ Expr3()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/            
  | <REVERSE>/*@bgen(jjtree) Reverse */
              {
                Reverse jjtn002 = new Reverse(JJTREVERSE);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ Expr3()/*@bgen(jjtree)*/
              } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  throw (RuntimeException)jjte002;
                }
                if (jjte002 instanceof ParseException) {
                  throw (ParseException)jjte002;
                }
                throw (Error)jjte002;
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
              }
/*@egen*/         
  | Expr3()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expr3():{/*@bgen(jjtree) Expr3 */
  Expr3 jjtn000 = new Expr3(JJTEXPR3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Expr3 */
    try {
/*@egen*/
    "(" Expr1() ")" | Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Saves() : {/*@bgen(jjtree) Saves */
  Saves jjtn000 = new Saves(JJTSAVES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/   } {/*@bgen(jjtree) Saves */
    try {
/*@egen*/
    Identifier() <WRITE>"(" Filename() ")" <ENDLINE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
    // o 1\u00ba arg teria
}

void Identifier() : {/*@bgen(jjtree) Identifier */
                      Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token id;} {/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
        id = <VARIABLE>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
            jjtn000.name = id.image;
        }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Loaddotty() : {/*@bgen(jjtree) Loaddotty */
  Loaddotty jjtn000 = new Loaddotty(JJTLOADDOTTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) Loaddotty */
    try {
/*@egen*/
    <READ> "(" Filename() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Filename() : {/*@bgen(jjtree) Filename */
                   Filename jjtn000 = new Filename(JJTFILENAME);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token file;} {/*@bgen(jjtree) Filename */
    try {
/*@egen*/
    file = <STRING>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{
        jjtn000.name = file.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Input() : {/*@bgen(jjtree) Input */
                Input jjtn000 = new Input(JJTINPUT);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token in;}  {/*@bgen(jjtree) Input */
    try {
/*@egen*/
    in = <STRING>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
      jjtn000.name = in.image;   }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
