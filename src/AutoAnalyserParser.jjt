options {
    MULTI=true;
    NODE_PREFIX="";
}


PARSER_BEGIN(AutoAnalyserParser)


public class AutoAnalyserParser {
}


PARSER_END(AutoAnalyserParser)



SKIP : {" " | "\r" | "\t" | "\n"}
TOKEN:
{
     <EQUAL : "=">
    |<VARIABLE: (["A"-"Z","a"-"z"] (["A" - "Z", "a"- "z","0"-"9"])*)>
    |<ENDLINE : ";">
    |<STRING: ("\""(~["\""])*"\"") >
    // OPERATION
    |<SUM : "+">
    |<COMPLEMENT: "!">
    |<CONCATENATION: ".">
    |<INTERSECTION: "/\\" >
    |<UNION: "|">
    |<DIFFERENCE:"-">
    |<ACCEPT: ".accept">
    //Load and save
    |<READ : ".read">
    |<WRITE :".write">
}

SimpleNode Start() : {} {
     (LOOKAHEAD(<VARIABLE> <READ>) Read())+
     (LOOKAHEAD(2)Operations())+
     (LOOKAHEAD(<VARIABLE> <WRITE>)Saves())+
     <EOF>
     {
        return jjtThis;
    }
}


void Read() : {} {
  Identifier() Loaddotty() <ENDLINE>
}

void Operations() : {  } {
    Identifier()
    (
        <EQUAL> Expression()
      | <ACCEPT> "(" Input() #input ")" #Accept
    )
    <ENDLINE>
}

void Expression():{} {
    Expr1()
}

void Expr1():{} {

    Expr2()[
        (
           <CONCATENATION> Expr1() #Concatenation(2)
          | <INTERSECTION> Expr1() #Intersection(2)
          | <UNION> Expr1() #Union(2)
          | <DIFFERENCE> Expr1() #Difference(2)
        )
    ]
}

void Expr2():{}{
  <COMPLEMENT> Expr3() #Complement
  | Expr3()
}

void Expr3():{} {
    "(" Expr1() ")" | Identifier()
}

void Saves() : {   } {
    Identifier() <WRITE>"(" Filename() ")" <ENDLINE>
    // o 1ยบ arg teria
}

void Identifier() : { Token id;} {
        id = <VARIABLE> {
            jjtThis.name = id.image;
        }
}


void Loaddotty() : { } {
    <READ> "(" Filename() ")"
}

void Filename() : {Token file;} {
    file = <STRING>{
        jjtThis.name = file.image;
    }
}

void Input() : {Token in;}  {
    in = <STRING> {
      jjtThis.name = in.image;   }
}
