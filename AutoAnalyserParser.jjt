PARSER_BEGIN(AutoAnalyserParser)


public class AutoAnalyserParser {
}


PARSER_END(AutoAnalyserParser)



SKIP : {" " | "\r" | "\t" | "\n"}
TOKEN:
{
     <EQUAL : "=">
    |<VARIABLE: (["A"-"Z","a"-"z"] (["A" - "Z", "a"- "z","0"-"9"])*)>
    |<ENDLINE : ";">
    |<STRING: ("\""(~["\""])*"\"") >
    // OPERATION
    |<SUM : "+">
    |<COMPLEMENT: "!">
    |<CONCATENATION: ".">
    |<INTERSECTION: "/\\" >
    |<UNION: "|">
    |<DIFFERENCE:"-">
    |<ACCEPT: ".accept">
    //Load and save
    |<READ : ".read">
    |<WRITE :".write">
}

SimpleNode start() : {} {
     (LOOKAHEAD(<VARIABLE> <READ>) read())+
     (LOOKAHEAD(2)operations())+
     (LOOKAHEAD(<VARIABLE> <WRITE>)saves())+
     <EOF>
     {
        return jjtThis;
    }
}


void read() : {} {
  identifier() loaddotty() <ENDLINE>
}

void operations() : {  } {
  identifier() <EQUAL> expression() <ENDLINE>
}

void expression():{} {
    expr1()
}

void expr1():{} {

    expr2()[
        (
            <SUM> expr1() #sum
          | <COMPLEMENT> expr1() #complement
          | <CONCATENATION> expr1() #concatenation
          | <INTERSECTION> expr1() #intersection
          | <UNION> expr1() #union
          | <DIFFERENCE> expr1() #difference
          | <ACCEPT> expr1() #accept
        )
    ]
}

void expr2():{} {
    "(" expr1() ")" | <VARIABLE>
}

void saves() : {   } {
    identifier() <WRITE>"(" filename() ")" <ENDLINE>
    // o 1ยบ arg teria
}

void identifier() : { Token id;} {
        id = <VARIABLE> {

        } #Variable
}


void loaddotty() : { } {
    <READ> "(" filename() ")"
}

void filename() : {Token file;} {
    file = <STRING>{

    } #Filename
}
