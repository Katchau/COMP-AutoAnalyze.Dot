PARSER_BEGIN(AutoAnalyser)


public class AutoAnalyser {
    public static void main(String args[]) throws ParseException {
        AutoAnalyser analyser = new AutoAnalyser(System.in);

        SimpleNode start;
        
     //   try {
            start = analyser.start();
            //System.out.println("accepted");
             start.dump("");
       // } catch (Exception t){
            //System.out.println("rejected");
        //}
       
    }
}


PARSER_END(AutoAnalyser)



SKIP : {" " | "\r" | "\t"}
TOKEN:
{
  
     <EQUAL : "=">
    |<VARIABLE: (["A"-"Z","a"-"z"] (["A" - "Z", "a"- "z","0"-"9"])*)>
    |<ENDLINE : ";">
    |<LF : "\n">
    |<STRING: ("\""(~["\""])*"\"") >
    // OPERATION
    |<SUM : "+">
    |<COMPLEMENT: "!">
    |<CONCATENATION: ".">
    |<INTERSECTION: "/\\" >
    |<UNION: "|">
    |<DIFFERENCE:"-">
    |<ACCEPT: ".accept">
    //Load and save
    |<READ : ".read">
    |<WRITE :".write">
}

SimpleNode start() : {} {
     (LOOKAHEAD(<VARIABLE> <READ>) read())+ 
     operations()  
     saves(){
        return jjtThis;
    }
}


void read() : {} {
  identifier() loaddotty() <ENDLINE> <LF>
}

void operations() : {  } {
  identifier() <EQUAL> expression() <ENDLINE> <LF>
}

void expression():{} {
    expr1()
}

void expr1():{} {

    expr2()[
        (
            <SUM> expr2() #sum 
          | <COMPLEMENT> expr2() #complement 
          | <CONCATENATION> expr2() #concatenation 
          | <INTERSECTION> expr2 () #intersection 
          | <UNION> expr2() #union 
          | <DIFFERENCE> expr2() #difference
          | <ACCEPT> expr2() #accept
        )
    ]
}

void expr2():{} {
    "(" expr1() ")" | <VARIABLE>
}

void saves() : {   } {
    identifier() <WRITE>"(" filename() ")" <ENDLINE> <LF>
    // o 1ยบ arg teria
}

void identifier() : { Token id;} {
        id = <VARIABLE> {
                    
        } #Variable
}


void loaddotty() : { } {
    <READ> "(" filename() ")"
}

void filename() : {Token file;} {
    file = <STRING>{
        
    } #Filename
}

